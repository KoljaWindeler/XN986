#include <stdint.h>
//#define int32_t int
//#define int8_t char



#ifdef __cplusplus
extern "C" {
#endif

#define SNX_AUD32_TYPE_ENCODER	1	// type for encoder
#define SNX_AUD32_TYPE_DECODER	2	// type for decoder

#ifdef __cplusplus
extern "C" {
#endif

enum SNX_AUD32_FORMAT {
	SNX_AUD32_FMT8_8KBPS,		// old interface
	SNX_AUD32_FMT8_9p6KBPS,		// old interface
	SNX_AUD32_FMT8_11p2KBPS,	// old interface
	SNX_AUD32_FMT8_12p8KBPS,	// old interface
	SNX_AUD32_FMT8_14p4KBPS,	// old interface
	SNX_AUD32_FMT8_16KBPS,		// old interface
	SNX_AUD32_FMT16_8K_4p8KBPS,
	SNX_AUD32_FMT16_8K_6p4KBPS,
	SNX_AUD32_FMT16_8K_8KBPS,
	SNX_AUD32_FMT16_8K_9p6KBPS,
	SNX_AUD32_FMT16_8K_11p2KBPS,
	SNX_AUD32_FMT16_8K_12p8KBPS,
	SNX_AUD32_FMT16_8K_14p4KBPS,
	SNX_AUD32_FMT16_8K_16KBPS,
	SNX_AUD32_FMT16_8K_17p6KBPS,
	SNX_AUD32_FMT16_8K_19p2KBPS,
	SNX_AUD32_FMT16_8K_20p8KBPS,
	SNX_AUD32_FMT16_8K_22p4KBPS,
	SNX_AUD32_FMT16_8K_24KBPS,
	SNX_AUD32_FMT16_16K_8KBPS,
	SNX_AUD32_FMT16_16K_8p8KBPS,
	SNX_AUD32_FMT16_16K_9p6KBPS,
	SNX_AUD32_FMT16_16K_10p4KBPS,
	SNX_AUD32_FMT16_16K_11p2KBPS,
	SNX_AUD32_FMT16_16K_12KBPS,
	SNX_AUD32_FMT16_16K_12p8KBPS,
	SNX_AUD32_FMT16_16K_13p6KBPS,
	SNX_AUD32_FMT16_16K_14p4KBPS,
	SNX_AUD32_FMT16_16K_15p2KBPS,
	SNX_AUD32_FMT16_16K_16KBPS,
	SNX_AUD32_FMT16_16K_16p8KBPS,
	SNX_AUD32_FMT16_16K_17p6KBPS,
	SNX_AUD32_FMT16_16K_18p4KBPS,
	SNX_AUD32_FMT16_16K_19p2KBPS,
	SNX_AUD32_FMT16_16K_20KBPS,
	SNX_AUD32_FMT16_16K_20p8KBPS,
	SNX_AUD32_FMT16_16K_21p6KBPS,
	SNX_AUD32_FMT16_16K_22p4KBPS,
	SNX_AUD32_FMT16_16K_23p2KBPS,
	SNX_AUD32_FMT16_16K_24KBPS,
	SNX_AUD32_FMT16_16K_24p8KBPS,
	SNX_AUD32_FMT16_16K_25p6KBPS,
	SNX_AUD32_FMT16_16K_26p4KBPS,
	SNX_AUD32_FMT16_16K_27p2KBPS,
	SNX_AUD32_FMT16_16K_28KBPS,
	SNX_AUD32_FMT16_16K_28p8KBPS,
	SNX_AUD32_FMT16_16K_29p6KBPS,
	SNX_AUD32_FMT16_16K_30p4KBPS,
	SNX_AUD32_FMT16_16K_31p2KBPS,
	SNX_AUD32_FMT16_16K_32KBPS,
	SNX_AUD32_FMT16_32K_16KBPS,
	SNX_AUD32_FMT16_32K_19p2KBPS,
	SNX_AUD32_FMT16_32K_22p4KBPS,
	SNX_AUD32_FMT16_32K_25p6KBPS,
	SNX_AUD32_FMT16_32K_28p8KBPS,
	SNX_AUD32_FMT16_32K_32KBPS,
	SNX_AUD32_FMT16_32K_35p2KBPS,
	SNX_AUD32_FMT16_32K_38p4KBPS,
	SNX_AUD32_FMT16_32K_41p6KBPS,
	SNX_AUD32_FMT16_32K_44p8KBPS,
	SNX_AUD32_FMT16_32K_48KBPS,
	SNX_AUD32_FMT16_32K_51p2KBPS,
	SNX_AUD32_FMT16_32K_54p4KBPS,
	SNX_AUD32_FMT16_32K_57p6KBPS,
	SNX_AUD32_FMT16_32K_60p8KBPS,
	SNX_AUD32_FMT16_32K_64KBPS
};

struct SNX_AUD32_CONTEXT {
	int32_t type;			// encoder or decoder
	int32_t aud32_bytes_per_frame;	// bytes/frame in encoded data
	int32_t pcm_bytes_per_frame;	// bytes/frame in pcm S16LE data
	int32_t samples_per_frame;	// samples
};

struct SNX_AUD32_CONTEXT *snx_aud32_open (int32_t type,
				enum SNX_AUD32_FORMAT format);
int32_t snx_aud32_close (struct SNX_AUD32_CONTEXT *aud32);
int32_t snx_aud32_encode (struct SNX_AUD32_CONTEXT *aud32, 
				int8_t *p_src, int8_t *p_dst, 
				int32_t src_bytes, int32_t *p_dst_bytes);
void snx_aud32_decode_gain(int16_t gain);
int32_t snx_aud32_decode (struct SNX_AUD32_CONTEXT *aud32, 
				int8_t *p_src, int8_t *p_dst, 
				int32_t src_bytes, int32_t *p_dst_bytes);

#ifdef __cplusplus
}
#endif
